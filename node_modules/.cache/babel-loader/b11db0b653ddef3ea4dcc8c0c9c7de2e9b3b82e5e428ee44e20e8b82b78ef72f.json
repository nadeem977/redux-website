{"ast":null,"code":"var _jsxFileName = \"/home/nadeem/Desktop/stats/redux/src/pages/VoiceToText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceToText = () => {\n  _s();\n  const [isListening, setIsListening] = useState(false);\n  const [recognizedText, setRecognizedText] = useState('');\n  useEffect(() => {\n    let recognition = null;\n    const startListening = () => {\n      recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n      recognition.onresult = event => {\n        const transcript = Array.from(event.results).map(result => result[0].transcript).join('');\n        setRecognizedText(transcript);\n      };\n      recognition.start();\n    };\n    const stopListening = () => {\n      if (recognition) {\n        recognition.stop();\n        recognition = null;\n      }\n    };\n    if (isListening) {\n      startListening();\n    }\n    return () => {\n      stopListening();\n    };\n  }, [isListening]);\n  const handleToggleListening = () => {\n    setIsListening(!isListening);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToggleListening,\n      children: isListening ? 'Stop Listening' : 'Start Listening'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Recognized Text: \", recognizedText]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceToText, \"NGxGYW8QYd8UbkcH/7hFF0MkYGc=\");\n_c = VoiceToText;\nexport default VoiceToText;\nvar _c;\n$RefreshReg$(_c, \"VoiceToText\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","VoiceToText","_s","isListening","setIsListening","recognizedText","setRecognizedText","recognition","startListening","window","webkitSpeechRecognition","continuous","interimResults","onstart","onend","onresult","event","transcript","Array","from","results","map","result","join","start","stopListening","stop","handleToggleListening","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nadeem/Desktop/stats/redux/src/pages/VoiceToText.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst VoiceToText = () => {\n  const [isListening, setIsListening] = useState(false);\n  const [recognizedText, setRecognizedText] = useState('');\n\n  useEffect(() => {\n    let recognition = null;\n\n    const startListening = () => {\n      recognition = new window.webkitSpeechRecognition();\n      recognition.continuous = true;\n      recognition.interimResults = true;\n\n      recognition.onstart = () => {\n        setIsListening(true);\n      };\n\n      recognition.onend = () => {\n        setIsListening(false);\n      };\n\n      recognition.onresult = (event) => {\n        const transcript = Array.from(event.results)\n          .map((result) => result[0].transcript)\n          .join('');\n\n        setRecognizedText(transcript);\n      };\n\n      recognition.start();\n    };\n\n    const stopListening = () => {\n      if (recognition) {\n        recognition.stop();\n        recognition = null;\n      }\n    };\n\n    if (isListening) {\n      startListening();\n    }\n\n    return () => {\n      stopListening();\n    };\n  }, [isListening]);\n\n  const handleToggleListening = () => {\n    setIsListening(!isListening);\n  };\n\n  return (\n    <div>\n      <button onClick={handleToggleListening}>{isListening ? 'Stop Listening' : 'Start Listening'}</button>\n      <p>Recognized Text: {recognizedText}</p>\n    </div>\n  );\n};\n\nexport default VoiceToText;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,IAAIS,WAAW,GAAG,IAAI;IAEtB,MAAMC,cAAc,GAAGA,CAAA,KAAM;MAC3BD,WAAW,GAAG,IAAIE,MAAM,CAACC,uBAAuB,CAAC,CAAC;MAClDH,WAAW,CAACI,UAAU,GAAG,IAAI;MAC7BJ,WAAW,CAACK,cAAc,GAAG,IAAI;MAEjCL,WAAW,CAACM,OAAO,GAAG,MAAM;QAC1BT,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC;MAEDG,WAAW,CAACO,KAAK,GAAG,MAAM;QACxBV,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC;MAEDG,WAAW,CAACQ,QAAQ,GAAIC,KAAK,IAAK;QAChC,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC,CACzCC,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,CAACL,UAAU,CAAC,CACrCM,IAAI,CAAC,EAAE,CAAC;QAEXjB,iBAAiB,CAACW,UAAU,CAAC;MAC/B,CAAC;MAEDV,WAAW,CAACiB,KAAK,CAAC,CAAC;IACrB,CAAC;IAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIlB,WAAW,EAAE;QACfA,WAAW,CAACmB,IAAI,CAAC,CAAC;QAClBnB,WAAW,GAAG,IAAI;MACpB;IACF,CAAC;IAED,IAAIJ,WAAW,EAAE;MACfK,cAAc,CAAC,CAAC;IAClB;IAEA,OAAO,MAAM;MACXiB,aAAa,CAAC,CAAC;IACjB,CAAC;EACH,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,MAAMwB,qBAAqB,GAAGA,CAAA,KAAM;IAClCvB,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;EAED,oBACEH,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAQ6B,OAAO,EAAEF,qBAAsB;MAAAC,QAAA,EAAEzB,WAAW,GAAG,gBAAgB,GAAG;IAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC,eACrGjC,OAAA;MAAA4B,QAAA,GAAG,mBAAiB,EAACvB,cAAc;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAC/B,EAAA,CAzDID,WAAW;AAAAiC,EAAA,GAAXjC,WAAW;AA2DjB,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}